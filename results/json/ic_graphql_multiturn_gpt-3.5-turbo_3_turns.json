{
  "0": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 0,
    "query": "Fetch allPosts with the title and body fields",
    "gold": "{   allPosts {     nodes {       title       body     }   } }",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit'}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "1": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 1,
    "query": "Fetch all posts with title and body",
    "gold": "{   allPosts {     nodes {       title       body     }   } }",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit'}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "2": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 2,
    "query": "Fetch allPosts only with the body field",
    "gold": "{   allPosts { nodes {  body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'body': 'Consectetur adipiscing elit'}, {'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "3": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 3,
    "query": "Fetch all posts with body",
    "gold": "{   allPosts { nodes {  body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'body': 'Consectetur adipiscing elit'}, {'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "4": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 4,
    "query": "Fetch allPosts only with the title field",
    "gold": "{   allPosts { nodes {  title   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example'}, {'title': 'Third post example'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "5": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 5,
    "query": "Fetch all posts with title",
    "gold": "{   allPosts { nodes {  title   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example'}, {'title': 'Third post example'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "6": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 6,
    "query": "Fetch allPosts only with the createdDate field",
    "gold": "{   allPosts { nodes {  createdDate   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       createdDate     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'createdDate': '2023-11-21T01:25:09.549781'}, {'createdDate': '2023-11-21T01:25:09.549781'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "7": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 7,
    "query": "Fetch all posts with the created date",
    "gold": "{   allPosts { nodes {  createdDate   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       id       title       content       createdAt     }   } }",
        "{   allPosts {     nodes {       id       title       createdAt     }   } }",
        "{   allPosts {     nodes {       id       title       createdDate     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'content' on type 'Post'.\n\nGraphQL request:1:55\n1 | {   allPosts {     nodes {       id       title       content       createdAt     }   } }\n  |                                                       ^",
        "Error executing GraphQL query: Cannot query field 'createdAt' on type 'Post'. Did you mean 'createdDate'?\n\nGraphQL request:1:55\n1 | {   allPosts {     nodes {       id       title       createdAt     }   } }\n  |                                                       ^",
        "{'allPosts': {'nodes': [{'id': 2, 'title': 'Second post example', 'createdDate': '2023-11-21T01:25:09.549781'}, {'id': 3, 'title': 'Third post example', 'createdDate': '2023-11-21T01:25:09.549781'}]}}"
      ],
      "rewards": [
        0.0,
        0.0,
        0.6229508196721312
      ],
      "valid_action": [
        false,
        false,
        true
      ],
      "query_rewards": [
        0.6363636363636364,
        0.7567567567567568,
        0.8108108108108109
      ]
    },
    "summary": {
      "max_reward": 0.6229508196721312,
      "max_reward_idx": 2,
      "max_query_reward": 0.8108108108108109,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "8": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 8,
    "query": "Fetch allPosts only with authorId field",
    "gold": "{   allPosts { nodes {  authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       authorId     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'authorId': 2}, {'authorId': 3}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "9": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 9,
    "query": "Fetch all posts with the author id",
    "gold": "{   allPosts { nodes {  authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(filter: {authorId: {isNotNull: true}}) {     nodes {       id       title       content       authorId     }   } }",
        "{   allPosts(filter: {authorId: {is: {isNotNull: true}}}) {     nodes {       id       title       content       authorId     }   } }",
        "{   allPosts(filter: {authorId: {isNotNull: true}}) {     nodes {       id       title       content       authorId     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Unknown argument 'filter' on field 'Query.allPosts'. Did you mean 'after'?\n\nGraphQL request:1:14\n1 | {   allPosts(filter: {authorId: {isNotNull: true}}) {     nodes {       id      \n  |              ^\n  |  title       content       authorId     }   } }",
        "Error executing GraphQL query: Unknown argument 'filter' on field 'Query.allPosts'. Did you mean 'after'?\n\nGraphQL request:1:14\n1 | {   allPosts(filter: {authorId: {is: {isNotNull: true}}}) {     nodes {       id\n  |              ^\n  |        title       content       authorId     }   } }",
        "Error executing GraphQL query: Unknown argument 'filter' on field 'Query.allPosts'. Did you mean 'after'?\n\nGraphQL request:1:14\n1 | {   allPosts(filter: {authorId: {isNotNull: true}}) {     nodes {       id      \n  |              ^\n  |  title       content       authorId     }   } }"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.35064935064935066,
        0.32926829268292684,
        0.35064935064935066
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.35064935064935066,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "10": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 10,
    "query": "Fetch allPosts with the title, body and authorId fields",
    "gold": "{   allPosts { nodes {  title body authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title       body       authorId     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit', 'authorId': 2}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales', 'authorId': 3}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "11": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 11,
    "query": "Fetch all posts with title, body and author id",
    "gold": "{   allPosts { nodes {  title body authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       title       body       authorId     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit', 'authorId': 2}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales', 'authorId': 3}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "12": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 12,
    "query": "Fetch allPosts where the author id is 1. Include the title and body fields",
    "gold": "{   allPosts(condition : { authorId: 1}) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(condition: { authorId: 1 }) {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': []}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "13": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 13,
    "query": "Fetch all posts where the author id is 1 and get the title and body",
    "gold": "{   allPosts(condition : { authorId: 1}) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   postsByAuthorId(authorId: 1) {     nodes {       title       body     }   } }",
        "{   postByAuthorId(authorId: 1) {     nodes {       title       body     }   } }",
        "{   postsByAuthorId(authorId: 1) {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'postsByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postsByAuthorId(authorId: 1) {     nodes {       title       body     }   } }\n  |     ^",
        "Error executing GraphQL query: Cannot query field 'postByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postByAuthorId(authorId: 1) {     nodes {       title       body     }   } }\n  |     ^",
        "Error executing GraphQL query: Cannot query field 'postsByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postsByAuthorId(authorId: 1) {     nodes {       title       body     }   } }\n  |     ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.65,
        0.6333333333333333,
        0.65
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.65,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "14": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 14,
    "query": "Fetch allPosts where the title is 'First post example'. Include the body field",
    "gold": "{   allPosts(condition : { title: \"First post example\"}) { nodes {  body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(condition: { title: \"First post example\" }) {     nodes {       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': []}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "15": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 15,
    "query": "Fetch all posts where the title is First post example and get the body field",
    "gold": "{   allPosts(condition : { title: \"First post example\"}) { nodes {  body   } }}",
    "turn_history": {
      "actions": [
        "{   posts(condition: {title: \"First post example\"}) {     nodes {       body     }   } }",
        "{   allPosts(condition: {title: \"First post example\"}) {     nodes {       body     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'posts' on type 'Query'. Did you mean 'post' or 'allPosts'?\n\nGraphQL request:1:5\n1 | {   posts(condition: {title: \"First post example\"}) {     nodes {       body     }   } }\n  |     ^",
        "{'allPosts': {'nodes': []}}"
      ],
      "rewards": [
        0.0,
        1.0
      ],
      "valid_action": [
        false,
        true
      ],
      "query_rewards": [
        0.9193548387096774,
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 1,
      "max_query_reward": 1.0,
      "turns_taken": 2,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "16": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 16,
    "query": "Fetch allPosts where the body is 'Lorem ipsum dolor sit amet'. Include the title field",
    "gold": "{   allPosts(condition : { body: \"Lorem ipsum dolor sit amet\"}) { nodes {  title   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(condition: { body: { equalTo: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }",
        "{   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }",
        "{   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: String cannot represent a non string value: {equalTo: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { equalTo: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^",
        "Error executing GraphQL query: String cannot represent a non string value: {_eq: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^",
        "Error executing GraphQL query: String cannot represent a non string value: {_eq: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.8701298701298701,
        0.9178082191780822,
        0.9178082191780822
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 1,
      "max_query_reward": 0.9178082191780822,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "17": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 17,
    "query": "Fetch all posts where the body is Lorem ipsum dolor sit amet and get the title field",
    "gold": "{   allPosts(condition : { body: \"Lorem ipsum dolor sit amet\"}) { nodes {  title   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(condition: { body: { equalTo: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }",
        "{   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }",
        "{   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: String cannot represent a non string value: {equalTo: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { equalTo: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^",
        "Error executing GraphQL query: String cannot represent a non string value: {_eq: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^",
        "Error executing GraphQL query: String cannot represent a non string value: {_eq: \"Lorem ipsum dolor sit amet\"}\n\nGraphQL request:1:33\n1 | {   allPosts(condition: { body: { _eq: \"Lorem ipsum dolor sit amet\" } }) {     nodes {       title     }   } }\n  |                                 ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.8701298701298701,
        0.9178082191780822,
        0.9178082191780822
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 1,
      "max_query_reward": 0.9178082191780822,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "18": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 18,
    "query": "Fetch the last post with the title and body field",
    "gold": "{   allPosts(last : 1) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   post(last: 1) {     nodes {       title       body     }   } }",
        "{   posts(last: 1) {     nodes {       title       body     }   } }",
        "{   post(last: 1) {     title     body   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Unknown argument 'last' on field 'Query.post'.\n\nGraphQL request:1:10\n1 | {   post(last: 1) {     nodes {       title       body     }   } }\n  |          ^",
        "Error executing GraphQL query: Cannot query field 'posts' on type 'Query'. Did you mean 'post' or 'allPosts'?\n\nGraphQL request:1:5\n1 | {   posts(last: 1) {     nodes {       title       body     }   } }\n  |     ^",
        "Error executing GraphQL query: Unknown argument 'last' on field 'Query.post'.\n\nGraphQL request:1:10\n1 | {   post(last: 1) {     title     body   } }\n  |          ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.8378378378378378,
        0.8648648648648649,
        0.6486486486486487
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 1,
      "max_query_reward": 0.8648648648648649,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "19": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 19,
    "query": "Fetch the first post with the title and body field",
    "gold": "{   allPosts(first : 1) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   post(first: 1) {     nodes {       title       body     }   } }",
        "{   posts(first: 1) {     nodes {       title       body     }   } }",
        "{   post {     title     body   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Unknown argument 'first' on field 'Query.post'.\n\nGraphQL request:1:10\n1 | {   post(first: 1) {     nodes {       title       body     }   } }\n  |          ^",
        "Error executing GraphQL query: Cannot query field 'posts' on type 'Query'. Did you mean 'post' or 'allPosts'?\n\nGraphQL request:1:5\n1 | {   posts(first: 1) {     nodes {       title       body     }   } }\n  |     ^",
        "Error executing GraphQL query: Field 'post' argument 'nodeId' of type 'ID!' is required, but it was not provided.\n\nGraphQL request:1:5\n1 | {   post {     title     body   } }\n  |     ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.8421052631578947,
        0.868421052631579,
        0.42105263157894735
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 1,
      "max_query_reward": 0.868421052631579,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "20": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 20,
    "query": "Fetch the first two post with the title and body field",
    "gold": "{   allPosts(first : 2) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(first: 2) {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit'}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "21": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 21,
    "query": "Fetch the last three post with the title and body field",
    "gold": "{   allPosts(last : 3) { nodes {  title body   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(last: 3) {     nodes {       title       body     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit'}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales'}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "medium"
  },
  "22": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 22,
    "query": "Fetch allPosts and orderBy CREATED_DATE_ASC. Include the title, body and authorId",
    "gold": "{   allPosts(orderBy: CREATED_DATE_ASC) { nodes {  title body authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(orderBy: CREATED_DATE_ASC) {     nodes {       title       body       authorId     }   } }"
      ],
      "observations": [
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit', 'authorId': 2}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales', 'authorId': 3}]}}"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ],
      "query_rewards": [
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 1,
      "turns_max": 3
    },
    "hardness": "easy"
  },
  "23": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 23,
    "query": "Fetch all posts and order by in ascending on their created date and get their title, body and author id",
    "gold": "{   allPosts(orderBy: CREATED_DATE_ASC) { nodes {  title body authorId   } }}",
    "turn_history": {
      "actions": [
        "{   allPosts(orderBy: CREATED_AT_ASC) {     nodes {       title       body       author {         id       }     }   } }",
        "{   allPosts(orderBy: CREATED_DATE_ASC) {     nodes {       title       body       author {         id       }     }   } }",
        "{   allPosts(orderBy: CREATED_DATE_ASC) {     nodes {       title       body       authorId     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Value 'CREATED_AT_ASC' does not exist in 'PostsOrderBy' enum. Did you mean the enum value 'CREATED_DATE_ASC' or 'CREATED_DATE_DESC'?\n\nGraphQL request:1:23\n1 | {   allPosts(orderBy: CREATED_AT_ASC) {     nodes {       title       body       author {         id       }     }   } }\n  |                       ^",
        "Error executing GraphQL query: Cannot query field 'author' on type 'Post'. Did you mean 'authorId'?\n\nGraphQL request:1:84\n1 | {   allPosts(orderBy: CREATED_DATE_ASC) {     nodes {       title       body    \n  |    author {         id       }     }   } }\n  |    ^",
        "{'allPosts': {'nodes': [{'title': 'Second post example', 'body': 'Consectetur adipiscing elit', 'authorId': 2}, {'title': 'Third post example', 'body': 'Aenean blandit felis sodales', 'authorId': 3}]}}"
      ],
      "rewards": [
        0.0,
        0.0,
        1.0
      ],
      "valid_action": [
        false,
        false,
        true
      ],
      "query_rewards": [
        0.9076923076923077,
        0.9384615384615385,
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 2,
      "max_query_reward": 1.0,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "24": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 24,
    "query": "Fetch the posts where the author id is 1 and get all the fields in the response",
    "gold": "{   allPosts(condition: {authorId: 2}) { nodes {  id title body authorId createdDate   } }}",
    "turn_history": {
      "actions": [
        "{   postsByAuthorId(authorId: 1) {     nodes {       id       title       content       createdAt       updatedAt       author {         id         name         email       }     }   } }",
        "{   postByAuthorId(authorId: 1) {     nodes {       id       title       content       createdAt       updatedAt       author {         id         name         email       }     }   } }",
        "{   postsByAuthorId(authorId: 1) {     nodes {       id       title       content       createdAt       updatedAt       author {         id         name         email       }     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'postsByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postsByAuthorId(authorId: 1) {     nodes {       id       title       conten\n  |     ^\n  | t       createdAt       updatedAt       author {         id         name        ",
        "Error executing GraphQL query: Cannot query field 'postByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postByAuthorId(authorId: 1) {     nodes {       id       title       content\n  |     ^\n  |        createdAt       updatedAt       author {         id         name         ",
        "Error executing GraphQL query: Cannot query field 'postsByAuthorId' on type 'Query'. Did you mean 'postById'?\n\nGraphQL request:1:5\n1 | {   postsByAuthorId(authorId: 1) {     nodes {       id       title       conten\n  |     ^\n  | t       createdAt       updatedAt       author {         id         name        "
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.6875,
        0.6770833333333334,
        0.6875
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.6875,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "25": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 25,
    "query": "Fetch all posts with the fields of id, title, body and using author id fetch their username",
    "gold": "query {  allPosts {    nodes {      id      title      body      userByAuthorId {        username      }    }  }}",
    "turn_history": {
      "actions": [
        "{   allPosts {     nodes {       id       title       body       author {         id         username       }     }   } }",
        "{   allPosts {     nodes {       id       title       body       authorId       author {         id         username       }     }   } }",
        "{   allPosts {     nodes {       id       title       body       authorId       author {         id         username       }     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'author' on type 'Post'. Did you mean 'authorId'?\n\nGraphQL request:1:66\n1 | {   allPosts {     nodes {       id       title       body       author {       \n  |                                                                  ^\n  |   id         username       }     }   } }",
        "Error executing GraphQL query: Cannot query field 'author' on type 'Post'. Did you mean 'authorId'?\n\nGraphQL request:1:81\n1 | {   allPosts {     nodes {       id       title       body       authorId       \n  | author {         id         username       }     }   } }\n  | ^",
        "Error executing GraphQL query: Cannot query field 'author' on type 'Post'. Did you mean 'authorId'?\n\nGraphQL request:1:81\n1 | {   allPosts {     nodes {       id       title       body       authorId       \n  | author {         id         username       }     }   } }\n  | ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.7540983606557377,
        0.7424242424242424,
        0.7424242424242424
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.7540983606557377,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "26": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 26,
    "query": "Create a user with the username 'Bob' and return the username field",
    "gold": "mutation {  createUser(input: {user: {username: \"Bob\"}}) {    user {      username    }  }}",
    "turn_history": {
      "actions": [
        "mutation {   createUser(input: {username: \"Bob\"}) {     user {       username     }   } }",
        "mutation {   createUser(input: {user: {username: \"Bob\"}}) {     user {       username     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Field 'CreateUserInput.user' of required type 'UserInput!' was not provided.\n\nGraphQL request:1:32\n1 | mutation {   createUser(input: {username: \"Bob\"}) {     user {       username     }   } }\n  |                                ^",
        "{'createUser': {'user': {'username': 'Bob'}}}"
      ],
      "rewards": [
        0.0,
        1.0
      ],
      "valid_action": [
        false,
        true
      ],
      "query_rewards": [
        0.8955223880597015,
        1.0
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 1,
      "max_query_reward": 1.0,
      "turns_taken": 2,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "27": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 27,
    "query": "Delete a post by id where the id is 1 and return the post title",
    "gold": "mutation {  deletePostById(input : { id: 1}) {    post {      title    }  }}",
    "turn_history": {
      "actions": [
        "mutation {   deletePostById(input: {id: 1}) {     post {       title     }   } }",
        "mutation {   deletePostById(input: {id: 1}) {     post {       id       title     }   } }",
        "mutation {   deletePostById(input: {id: 1}) {     post {       id       title     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: {'message': \"No values were deleted in collection 'posts' because no values you can delete were found matching these criteria.\", 'locations': [{'line': 2, 'column': 3}], 'path': ['deletePostById']}",
        "Error executing GraphQL query: {'message': \"No values were deleted in collection 'posts' because no values you can delete were found matching these criteria.\", 'locations': [{'line': 2, 'column': 3}], 'path': ['deletePostById']}",
        "Error executing GraphQL query: {'message': \"No values were deleted in collection 'posts' because no values you can delete were found matching these criteria.\", 'locations': [{'line': 2, 'column': 3}], 'path': ['deletePostById']}"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        1.0,
        0.9622641509433962,
        0.9622641509433962
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 1.0,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "28": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 28,
    "query": "Update the username to Zack for the user with id equal to 3",
    "gold": "mutation {  updateUserById(input : { id: 3, userPatch: { username: \"Zack\"}}) {    user {      id,      username    }  }}",
    "turn_history": {
      "actions": [
        "mutation {   updateUser(input: {id: 3, patch: {username: \"Zack\"}}) {     user {       id       username     }   } }",
        "mutation {   updateUser(input: {id: \"3\", patch: {username: \"Zack\"}}) {     user {       id       username     }   } }",
        "mutation {   updateUser(input: {id: \"3\", patch: {username: \"Zack\"}}) {     user {       id       username     }   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Field 'UpdateUserInput.nodeId' of required type 'ID!' was not provided.\n\nGraphQL request:1:32\n1 | mutation {   updateUser(input: {id: 3, patch: {username: \"Zack\"}}) {     user {       id       username     }   } }\n  |                                ^",
        "Error executing GraphQL query: Field 'UpdateUserInput.nodeId' of required type 'ID!' was not provided.\n\nGraphQL request:1:32\n1 | mutation {   updateUser(input: {id: \"3\", patch: {username: \"Zack\"}}) {     user {       id       username     }   } }\n  |                                ^",
        "Error executing GraphQL query: Field 'UpdateUserInput.nodeId' of required type 'ID!' was not provided.\n\nGraphQL request:1:32\n1 | mutation {   updateUser(input: {id: \"3\", patch: {username: \"Zack\"}}) {     user {       id       username     }   } }\n  |                                ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.872093023255814,
        0.8522727272727273,
        0.8522727272727273
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.872093023255814,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  },
  "29": {
    "environment": "ic_graphql",
    "dataset": "./data/graphql/nl2graphql_fs_1.json",
    "task_id": 29,
    "query": "Get the user with the fields id, username and created date where the username is Benjie",
    "gold": "{   allUsers(condition : { username: \"Benjie\"}) { nodes {  id username createdDate   } }}",
    "turn_history": {
      "actions": [
        "{   userByUsername(username: \"Benjie\") {     id     username     created   } }",
        "{   user(username: \"Benjie\") {     id     username     created   } }",
        "{   userByUserName(username: \"Benjie\") {     id     username     created   } }"
      ],
      "observations": [
        "Error executing GraphQL query: Cannot query field 'userByUsername' on type 'Query'.\n\nGraphQL request:1:5\n1 | {   userByUsername(username: \"Benjie\") {     id     username     created   } }\n  |     ^",
        "Error executing GraphQL query: Unknown argument 'username' on field 'Query.user'.\n\nGraphQL request:1:10\n1 | {   user(username: \"Benjie\") {     id     username     created   } }\n  |          ^",
        "Error executing GraphQL query: Cannot query field 'userByUserName' on type 'Query'.\n\nGraphQL request:1:5\n1 | {   userByUserName(username: \"Benjie\") {     id     username     created   } }\n  |     ^"
      ],
      "rewards": [
        0.0,
        0.0,
        0.0
      ],
      "valid_action": [
        false,
        false,
        false
      ],
      "query_rewards": [
        0.6447368421052632,
        0.5972222222222222,
        0.6233766233766234
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "max_query_reward": 0.6447368421052632,
      "turns_taken": 3,
      "turns_max": 3
    },
    "hardness": "hard"
  }
}